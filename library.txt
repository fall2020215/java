********************* import java.util.Scanner **************************
Example:
Scanner sc = new Scanner(System.in);
System.out.print("Enter subtotal: "); // or System.out.println("....");
double subtotal = sc.nextDouble();

********************* String class ************************************
In java, a string is actually a String object

Types of String: string literal ("java is good for coder"), empty string (""), and null value (string str = null) -> this means that the value of the string is unknow, String variable points to nothing.

Example: 
double price = 15.9;
String priceString = "Price: " + price;


METHOD:
charAt​(int index) --> char: Returns the char value at the specified index.

compareTo​(String anotherString) --> int: Compares two strings lexicographically // 0: if it is equal, otherwise -1

compareToIgnoreCase​(String str) --> int: Compares two strings lexicographically, ignoring case differences. // 0: if it is equal, otherwise -1

contains​(CharSequence s) --> boolean: Returns true if and only if this string contains the specified sequence of char values.

endsWith​(String suffix) --> boolean: Tests if this string ends with the specified suffix.

equals​(Object anObject) --> boolean: Compares this string to the specified object.

equalsIgnoreCase​(String anotherString) --> boolean: Compares this String to another String, ignoring case considerations.

hashCode​() --> int: Returns a hash code for this string.

indexOf​(int ch) --> int: Returns the index within this string of the first occurrence of the specified character.

indexOf​(int ch, int fromIndex) --> int Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index.

indexOf​(String str) --> int Returns the index within this string of the first occurrence of the specified substring.

indexOf​(String str, int fromIndex) --> int Returns the index within this string of the first occurrence of the specified substring, starting at the specified index.

isEmpty​() --> boolean: Returns true if, and only if, length() is 0.

lastIndexOf​(int ch): --> int: Returns the index within this string of the last occurrence of the specified character.

lastIndexOf​(int ch, int fromIndex): --> int: Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index.

lastIndexOf​(String str): --> int: Returns the index within this string of the last occurrence of the specified substring.

lastIndexOf​(String str, int fromIndex): --> int: Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index.

length​() --> int: Returns the length of this string.

matches​(String regex): --> boolean:  Tells whether or not this string matches the given regular expression.






*********************** Integer class and Double class ****************
STATIC methods:
parseInt(stringName), parseDouble(stringName) --> convert string to int or double
toString(intName), toString(doubleName) --> convert int or double to string

********************* Math class *************************************
java.lang.Math
Static mathods: round(number), pow(number,power), sqrt(number), max(a,b), min(a, b), and random()
Example:
double x = Math.random() * 100; // reuslt is a value >= 0.0 and. < 100.0
long result = (long) x; // converts the result from double to long

******************** NumberFormat class *******************************
java.text.NumberFormat
Static methods: getCurrencyInstance (), getPercentInstance(), getNumberInstance()  ---> return a NumberFormat object
Methods for NumberFormat object: format(), setMinimumFractionDigit(int), setMaximumDigits(int)  --> using these methods after static methods
Example: 
double miles = 15341.253;
NumberFormat number = NumberFormat.getNumberInstance();
number.setMaximumFractionDigits(1);
String milesString = number.format(miles);  // return 15,341.3

********************* BigDecimal class, RoundingMode enumeration ********************************
java.math.BigDecumal
java.math.RoundingMode



