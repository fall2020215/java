*********************** Declare a class ***********************
public | private class ClassName { statements }

NOTE: 
public | private: access modifiers
The file name for a class is the same as the class name with .java as the extension

************************ Declare main() method ****************
public static void main (String[] args) { statements }


************************ Import a single class from a package *********************
import packagename.ClassName;
Example:
import java.util.Scanner;
import java.util.Date;
import java.text.NumberFormat;

NOTE: all classes stored in java.lang package are automatically available to all Java programs
If we want to create an object without an import statement --> example, java.util.Scanner sc = new java.util.Scanner(System.in);

********************** Import all classes in a package ****************************
import packagename.*;
Example:
import java.uitl.*;
import java.text.*;

********************** Create an object from class *********************************
ClassName objectName = new ClassName(arguments); // constructor
Example:
Scanner sc = new Scanner(System.in);
Date now = new Date();

********************** Call a method from an OBJECT ********************************
objectName.methodName(arguments);
Example:
double subtotal = sc.nextDouble();
String currentDate = now.toString();

********************* call a STATIC method from a CLASS ****************************
ClassName.methodName(arguments);
Example:
String priceString = Double.toString(price); // convert a double to a string
double total = Double.parseDouble(inputStr); // convert a string to a double

******************** Declare and initialize a CONSTANT ****************************
final type CONSTANT_NAME = value;
Example:
final int DAY_IN_NOVEMBER = 30;

********************* inplicit casting work ******************************************
byte -> short -> int -> long -> float -> double
Example : 
double d = 95.0;
int i = 86, j = 91;
double average = (d + i + j)/3 ; // convert i and j to double values --> average = 90.6666666...

********************* an explicit cast ************************************************
(type) expression
Example: 
int grade = (int) 93.75; // convert double to int (grade = 93)

********************** Syntax for a static method *************************************
public | private static returnType methodName([parameterList]) {}

********************** Syntax for calling a static method that is in THE SAME CLASS **********
methodName([argumentList])

NOTE: when calling a static method, if we call it with the same class, we don't need the nameClass. If we call it
from another class (only when access modify is public), we don't need create a new object, just use the nameClass.

********************** Signature ******************************************************
The name of a method along with its parameter list form the signature of the method, which must be uniqe

************************ ENCAPSULATION **************************************************
Example: the getCode() method returns the value stored in the code field(data), and the setCode() method assigns a new value to the code field (code field is private)
--> This illustrates the concept of encapsulation.
---> The programer can HIDE, or encapsulate, some fields and methods of a class, while exposing others --> We use public | private.
Encapsulation lets us think of it as a black box that provides useful fields (data) and methods --> Example, when we use the parseInt() method of the Integer class
, we don't need to know how the method converts a string to an integer, and we don't need to know.

NOTE: access modify (public | private | protect) is encapsulation






