********* Compare int value to double value *************
if you compare an int value to double value, Java casts the int value to the double type

********** Compare two strings ***************
To test two strings for equality, you must call one of the methods of the String object(equals(String), and equalsIgnoreCase(String)). If you use the equlity oparator, you may get unpreductable results

******************** float value, long values **************
To identify float values, you have to type an f or F after the number
To identify long value, you can type an l or L after the number
Example: float interestRate = 8.125F; long numberOfBytes = 200000L;

******************** How the compound assignment operator can cause an explicit cast ********************
int i = 4;
double d = 4.5;
i += d; // i = 8 (4.5 is cast to the int type)

****************** switch statement ************************
Starting with Java 7, the switch statement can also be used with string expression. Then, the switch statement uses the equals() method of the String object to compare the strings. As a result, the strings in switch statements are case-sensitive.

****************** constructor ******************************
If we don't code a constructor, Java will create a DEFAULT CONSTRUCTOR that doens't accept any parameters and initializes all instance variables to NULL,
ZERO, FALSE. However, if we code a constructor that accepts parameters, Java won't create this default constructor.

When we code a constructor, we must use the "public" access modifier and the same name, including capitalization, as the class name.

If a class doens't contain any non-static fields or methods, we don't need to code a constructor for this class.


************************* static method and field *****************************

Since "static fields" and "static methods" belong to the class, not to an object created from the class, they are sometimes called "class fields" and "class methods"
 
 when we write a staic method, we can only use static fields and fields that are defined in the method (local variable or constant in this method). We cannot use instance variables in a static method because they belong to an instance of the class, not to the class as a whole.
 
 When to use static method fields and methods:
  + In general, when we need to create objects from a class, we should use regular fields and methods. That way, we can create several objects from a class, and each object has its own data in its own instance variables. Then, we can use the methods of each object to process that data.
  + in contrast, if we just need to perform a single task like a calculation, we can use a static method. Then , we pass the arguments that the method needs, an the method returns the result that you need without wver creating an object.
  
*********************** when a class is loaded ******************
A class is loaded when one of its constructors or static methods is called.
When a class is loaded, Java initializes all static variables and constants of the class. Then, it executes all static iniitalization blocks in the order in which they appear.
 
 
 

